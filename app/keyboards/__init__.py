# app/keyboards/__init__.py
from __future__ import annotations
from typing import List, Dict
from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def reply_keyboard(is_admin: bool) -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="üéØ –ú–æ–∏ –º–∏—Å—Å–∏–∏"), KeyboardButton(text="üóÇ –í—Å–µ –º–∏—Å—Å–∏–∏")],
        [KeyboardButton(text="‚ûï –î–∞—Ç—å –º–∏—Å—Å–∏—é"), KeyboardButton(text="üèÅ –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ä–º—ã")],
    ]
    if is_admin:
        rows.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Inline-–º–µ–Ω—é (–≤–µ—Ä—Ö–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main_menu(is_admin: bool = False) -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="üéØ –ú–æ–∏ –º–∏—Å—Å–∏–∏", callback_data="menu:mine")
    b.button(text="üóÇ –í—Å–µ –º–∏—Å—Å–∏–∏", callback_data="menu:all")
    b.button(text="‚ûï –î–∞—Ç—å –º–∏—Å—Å–∏—é", callback_data="menu:add")
    b.button(text="üèÅ –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ä–º—ã", callback_data="menu:lb")
    if is_admin:
        b.button(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin:panel")
        b.adjust(2, 2, 1)
    else:
        b.button(text="üè† –î–æ–º–æ–π", callback_data="menu:home")
        b.adjust(2, 2, 1)
    return b.as_markup()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –º–∏—Å—Å–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def mission_actions(mid: int, is_admin: bool = False) -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"m:{mid}:done")
    b.button(text="üìé –û—Ç—á—ë—Ç", callback_data=f"m:{mid}:report")
    b.button(text="‚è≥ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"m:{mid}:postmenu")
    b.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"m:{mid}:cancel")
    if is_admin:
        b.button(text="üóë –£–¥–∞–ª–∏—Ç—å –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞", callback_data=f"m:{mid}:delete_nopenalty")
        b.adjust(2, 2, 1)
    else:
        b.adjust(2, 2)
    return b.as_markup()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–¥–º–µ–Ω—é –ø–µ—Ä–µ–Ω–æ—Å–∞ 1/2/3 –¥–Ω—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def postpone_menu_kb(mid: int) -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="‚ûï 1 –¥–µ–Ω—å (0)", callback_data=f"m:{mid}:post:1")
    b.button(text="‚ûï 2 –¥–Ω—è (‚àí1)", callback_data=f"m:{mid}:post:2")
    b.button(text="‚ûï 3 –¥–Ω—è (‚àí2)", callback_data=f"m:{mid}:post:3")
    b.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"m:{mid}:post:cancel")
    b.adjust(3, 1)
    return b.as_markup()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ë—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é –¥–ª—è ¬´–ú–æ–∏ –º–∏—Å—Å–∏–∏¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def my_mission_kb(mid: int) -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª", callback_data=f"m:{mid}:done")
    b.button(text="‚è≥ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"m:{mid}:postmenu")
    b.adjust(2)
    return b.as_markup()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def confirm_assign_kb(mid: int) -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"assign:accept:{mid}")
    b.button(text="üö´ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"assign:decline:{mid}")
    b.adjust(2)
    return b.as_markup()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞–≥–∏–Ω–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def pagination(prefix: str, page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    if has_prev:
        b.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}:page:{page-1}")
    b.button(text=f"–°—Ç—Ä. {page+1}", callback_data="noop")
    if has_next:
        b.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"{prefix}:page:{page+1}")
    b.adjust(3)
    return b.as_markup()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∏—Å—Å–∏–∏ (—Å—Ç–∞—Ä—Ç) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def add_menu_kb() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="üë§ –í—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="add:pick")
    b.adjust(1)
    return b.as_markup()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∏–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å –∫–∞—Ä–º–æ–π –∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def build_user_picker_kb(users: List[Dict], page: int, total: int, page_size: int) -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    for u in users:
        base = (u.get("full_name") or "").strip() or (f"@{u['username']}" if u.get("username") else f"id{u['tg_id']}")
        karma = u.get("karma", None)
        active = u.get("active_count", None)
        label = f"{base} ‚Ä¢ ‚öñÔ∏è {int(karma or 0)} ‚Ä¢ üî• {int(active or 0)}" if karma is not None and active is not None else base
        b.button(text=label, callback_data=f"pick:set:{u['tg_id']}")
    pages = (total + page_size - 1) // page_size if page_size > 0 else 1
    if pages <= 1:
        b.adjust(2, 2, 2, 2)
        return b.as_markup()
    has_prev = page > 0
    has_next = page + 1 < pages
    if has_prev:
        b.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"pick:page:{page-1}")
    b.button(text=f"–°—Ç—Ä. {page+1}/{pages}", callback_data="noop")
    if has_next:
        b.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"pick:page:{page+1}")
    b.adjust(2, 2, 2, 2, 3)
    return b.as_markup()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–≤—å—é –æ—Ç—á—ë—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def review_kb(mid: int, uid: int) -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –æ—Ç—á—ë—Ç", callback_data=f"review:approve:{mid}:{uid}")
    b.button(text="‚úèÔ∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å",    callback_data=f"review:reject:{mid}:{uid}")
    b.adjust(2)
    return b.as_markup()
