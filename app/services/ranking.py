from __future__ import annotations
from typing import List, Tuple, Optional, Dict
import re
from app.db import get_db

# –ë–µ–π–∑–ª–∞–π–Ω —Ä–∞–Ω–≥–æ–≤: –∫–∞–∂–¥—ã–µ +100 –∫–∞—Ä–º—ã ‚Äî +1 —Å—Ç—É–ø–µ–Ω—å.
# <0 –∫–∞—Ä–º–∞ ‚Äî —Å–ø–µ—Ü-—Ä–∞–Ω–≥.
RANK_NAMES = [
    "ü™ô –ë—Ä–æ–¥—è–≥–∞",           # 0..99
    "üö¨ –®–ø–∞–Ω–∞",             # 100..199
    "üß¢ –î–≤–æ—Ä–æ–≤–æ–π",          # 200..299
    "üíº –ë—ã–≤–∞–ª—ã–π",           # 300..399
    "ü©∏ –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç",         # 400..499
    "üíø Mixtape Hustler",   # 500..599
    "üî• –£–ª–∏—á–Ω—ã–π OG",        # 600..699
    "üíé –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –ò–≥—Ä–æ–∫",  # 700..799
    "ü¶ç Big Ape",           # 800..899
    "üëë –ö–æ—Ä–æ–ª—å –ö–≤–∞—Ä—Ç–∞–ª–∞",   # 900..999
    "üï∂ –õ–µ–≥–µ–Ω–¥–∞ –£–ª–∏—Ü",      # 1000+
]
NEGATIVE_RANK = "üòà –ê–•–£–ï–í–®–ò–ô –¢–ò–ü"

def rank_for(karma: int | float | None) -> str:
    k = int(karma or 0)
    if k < 0:
        return NEGATIVE_RANK
    idx = k // 100
    if idx >= len(RANK_NAMES):
        return RANK_NAMES[-1]
    return RANK_NAMES[idx]

def next_threshold(karma: int | float | None) -> Optional[Tuple[int, str]]:
    k = int(karma or 0)
    if k < 0:
        return (0, RANK_NAMES[0])
    idx = k // 100
    nxt = (idx + 1) * 100
    if idx >= len(RANK_NAMES) - 1:
        return None
    return nxt, RANK_NAMES[idx + 1]

def _display_name(u: Dict) -> str:
    if u.get("username"):
        return f"@{u['username']}"
    if u.get("full_name"):
        return u["full_name"]
    return f"id{u.get('tg_id')}"

def _format_place(i: int) -> str:
    return f"{i:>2}."

async def profile_text(tg_id: int) -> str:
    db = await get_db()
    try:
        cur = await db.execute("SELECT tg_id, username, full_name, karma FROM users WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
        if not row:
            return "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏ —Å—Ç–∞—Ä—Ç –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –∞–¥–º–∏–Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–±—è."
        u = dict(row)
        k = int(u.get("karma") or 0)
        rname = rank_for(k)
        nxt = next_threshold(k)
        if nxt:
            need_pts, nxt_name = nxt
            need = max(0, need_pts - k)
            # –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π —Å–æ—Ç–Ω–∏
            base = (k // 100) * 100
            filled = max(0, min(10, (k - base) // 10))
            bar = "‚ñà" * filled + "‚îÄ" * (10 - filled)
            return (
                f"{rname} {_display_name(u)}\n"
                f"–ö–∞—Ä–º–∞: <b>{k}</b>\n"
                f"–î–æ —Ä–∞–Ω–≥–∞ ¬´{nxt_name}¬ª: {need}\n"
                f"[{bar}]  ({k - base}/100)"
            )
        else:
            return (
                f"{rname} {_display_name(u)}\n"
                f"–ö–∞—Ä–º–∞: <b>{k}</b>\n"
                f"–¢—ã –Ω–∞ –≤–µ—Ä—à–∏–Ω–µ ‚Äî –¥–∞–ª—å—à–µ —Ç–æ–ª—å–∫–æ –ª–µ–≥–µ–Ω–¥–∞."
            )
    finally:
        await db.close()

async def leaderboard_text(limit: int = 15) -> str:
    db = await get_db()
    try:
        cur = await db.execute(
            "SELECT tg_id, username, full_name, karma FROM users ORDER BY karma DESC, tg_id ASC LIMIT ?",
            (limit,)
        )
        top = [dict(r) for r in await cur.fetchall()]

        cur2 = await db.execute(
            "SELECT tg_id, username, full_name, karma FROM users ORDER BY karma ASC, tg_id ASC LIMIT 1"
        )
        last = await cur2.fetchone()

        if not top:
            return "–¢–∞–±–ª–æ –ø—É—Å—Ç–æ–µ ‚Äî –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è."

        lines: List[str] = ["<b>–¢–∞–±–ª–æ –∫–∞—Ä–º—ã</b>"]
        for i, u in enumerate(top, start=1):
            lines.append(f"{_format_place(i)} {rank_for(u['karma'])} {_display_name(u)} ‚Äî {u['karma']}")

        if last:
            last_d = dict(last)
            lines.append("\n‚Äî ‚Äî ‚Äî")
            lines.append(f"–í–Ω–∏–∑—É: {rank_for(last_d['karma'])} {_display_name(last_d)} ‚Äî {last_d['karma']}")
        return "\n".join(lines)
    finally:
        await db.close()

# –û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ —Ä–∞–Ω–≥—É –¥–ª—è ¬´—É–ª–∏—á–Ω–æ–≥–æ¬ª –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
def _rank_to_vocative(rank: str) -> str:
    r = re.sub(r"^[^\w]+", "", rank).lower()
    if "–∞—Ö—É–µ" in r:
        return "–∞—Ö—É–µ–≤—à–∏–π —Ç–∏–ø"
    # —É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    repl = {
        "–±—Ä–æ–¥—è–≥–∞": "–±—Ä–æ–¥—è–≥–∞",
        "—à–ø–∞–Ω–∞": "—à–ø–∞–Ω–∞",
        "–¥–≤–æ—Ä–æ–≤–æ–π": "–¥–≤–æ—Ä–æ–≤–æ–π",
        "–±—ã–≤–∞–ª—ã–π": "–±—ã–≤–∞–ª—ã–π",
        "–∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç": "–∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç",
        "—É–ª–∏—á–Ω—ã–π og": "—É–ª–∏—á–Ω—ã–π og",
        "–∫–æ—Ä–æ–ª—å –∫–≤–∞—Ä—Ç–∞–ª–∞": "–∫–æ—Ä–æ–ª—å –∫–≤–∞—Ä—Ç–∞–ª–∞",
        "–ª–µ–≥–µ–Ω–¥–∞ —É–ª–∏—Ü": "–ª–µ–≥–µ–Ω–¥–∞ —É–ª–∏—Ü",
        "god mode og": "god mode og",
        "mixtape hustler": "—Ö–∞—Å—Ç–ª–µ—Ä",
        "–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫": "–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫",
        "big ape": "big ape",
    }
    for k, v in repl.items():
        if k in r:
            return v
    return r

async def address_for(tg_id: int) -> str:
    db = await get_db()
    try:
        cur = await db.execute("SELECT username, full_name, karma FROM users WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
        if not row:
            return f"—ç–π, –±–æ–µ—Ü id{tg_id}"
        u = dict(row)
        k = int(u.get("karma") or 0)
        voc = _rank_to_vocative(rank_for(k))
        name = u.get("full_name") or (f"@{u['username']}" if u.get("username") else f"id{tg_id}")
        return f"—ç–π, {voc} {name}"
    finally:
        await db.close()
