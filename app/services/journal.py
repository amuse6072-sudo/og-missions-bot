from __future__ import annotations
import json
from typing import Dict, Any, List
from app.db import get_db

ICON = {
    "create": "üÜï",
    "done_sent": "‚úÖ",
    "admin_cancel": "üóë",
    "late": "üíÄ",
    "overdue": "üíÄ",
    "rank_up": "üëë",
    "postpone_1d": "‚è≥",
}

async def _table_exists(db, name: str) -> bool:
    cur = await db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (name,))
    return await cur.fetchone() is not None

async def _assignees_str(db, mission_id: int) -> str:
    sql = """
      SELECT '@'||COALESCE(u.username, 'id'||a.assignee_tg_id) AS u
      FROM assignments a
      LEFT JOIN users u ON u.tg_id = a.assignee_tg_id
      WHERE a.mission_id=?
    """
    cur = await db.execute(sql, (mission_id,))
    rows = [r["u"] for r in await cur.fetchall()]
    return ", ".join(rows) if rows else "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

async def _mission_title(db, mission_id: int) -> str:
    cur = await db.execute("SELECT title FROM missions WHERE id=?", (mission_id,))
    r = await cur.fetchone()
    return r["title"] if r else "–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

async def recent_events_text(limit: int = 15) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª:
    - –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ mission_events (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) ‚Äî —á–∏—Ç–∞–µ–º –∏–∑ –Ω–µ—ë;
    - –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º events(kind, payload, created_at) –∏ –≤—ã—Ç—è–≥–∏–≤–∞–µ–º mission_id –∏–∑ JSON payload.
    """
    db = await get_db()
    try:
        if await _table_exists(db, "mission_events"):
            sql = """
            WITH ass AS (
              SELECT a.mission_id,
                     GROUP_CONCAT('@'||COALESCE(u.username, 'id'||a.assignee_tg_id), ', ') AS assignees
              FROM assignments a
              LEFT JOIN users u ON u.tg_id = a.assignee_tg_id
              GROUP BY a.mission_id
            )
            SELECT e.kind, e.payload, e.created_at,
                   COALESCE('@'||u.username, '–∫—Ç–æ-—Ç–æ') AS actor,
                   m.title AS m_title,
                   ass.assignees
            FROM mission_events e
            LEFT JOIN missions m ON m.id = e.mission_id
            LEFT JOIN users u ON u.tg_id = e.actor_tg_id
            LEFT JOIN ass ON ass.mission_id = e.mission_id
            ORDER BY e.id DESC
            LIMIT ?
            """
            cur = await db.execute(sql, (limit,))
            rows = await cur.fetchall()
            if not rows:
                return "–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç. –î–≤–∏–≥–∞–π –¥–≤–∏–∂!"
            out: List[str] = ["üìú <b>–ñ—É—Ä–Ω–∞–ª</b>"]
            for r in rows:
                kind = str(r["kind"]).lower()
                icon = ICON.get(kind, "‚Ä¢")
                title = r["m_title"] or "–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                who = r["actor"] or "–∫—Ç–æ-—Ç–æ"
                ass = r["assignees"] or "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                if kind == "create":
                    out.append(f"{icon} {who} ‚Üí {ass}: ¬´{title}¬ª")
                elif kind == "done_sent":
                    out.append(f"{icon} {who} —Å–¥–∞–ª –æ—Ç—á—ë—Ç –ø–æ ¬´{title}¬ª")
                elif kind in {"admin_cancel"}:
                    out.append(f"{icon} ¬´{title}¬ª –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º")
                elif kind in {"late","overdue"}:
                    out.append(f"{icon} –ü—Ä–æ—Å—Ä–æ—á–∫–∞ –ø–æ ¬´{title}¬ª")
                elif kind == "rank_up":
                    out.append(f"{icon} {who} –∞–ø–Ω—É–ª —Ä–∞–Ω–≥")
                else:
                    out.append(f"{icon} {who} ‚Ä¢ {kind} ‚Ä¢ ¬´{title}¬ª")
            return "\n".join(out)

        # ‚Äî –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (events —Å JSON payload) ‚Äî
        cur = await db.execute(
            "SELECT kind, payload, created_at FROM events ORDER BY id DESC LIMIT ?",
            (limit,)
        )
        rows = await cur.fetchall()
        if not rows:
            return "–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç. –î–≤–∏–≥–∞–π –¥–≤–∏–∂!"

        out: List[str] = ["üìú <b>–ñ—É—Ä–Ω–∞–ª</b>"]
        for r in rows:
            kind = (r["kind"] or "").lower()
            icon = ICON.get(kind, "‚Ä¢")
            payload: Dict[str, Any] = {}
            try:
                payload = json.loads(r["payload"] or "{}")
            except Exception:
                payload = {}
            mission_id = payload.get("mission_id")
            actor_tg_id = payload.get("actor_tg_id") or payload.get("by_tg_id")

            title = await _mission_title(db, int(mission_id)) if mission_id else "–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            ass = await _assignees_str(db, int(mission_id)) if mission_id else "‚Äî"

            if kind == "create":
                who = payload.get("author_tg_id") or actor_tg_id or "–∫—Ç–æ-—Ç–æ"
                who_txt = f"@id{who}" if isinstance(who, int) else str(who)
                out.append(f"{icon} {who_txt} ‚Üí {ass}: ¬´{title}¬ª")
            elif kind == "done_sent":
                who = actor_tg_id or "–∫—Ç–æ-—Ç–æ"
                who_txt = f"@id{who}" if isinstance(who, int) else str(who)
                out.append(f"{icon} {who_txt} —Å–¥–∞–ª –æ—Ç—á—ë—Ç –ø–æ ¬´{title}¬ª")
            elif kind in {"admin_cancel"}:
                out.append(f"{icon} ¬´{title}¬ª –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º")
            elif kind in {"late","overdue"}:
                out.append(f"{icon} –ü—Ä–æ—Å—Ä–æ—á–∫–∞ –ø–æ ¬´{title}¬ª")
            elif kind == "postpone_1d":
                out.append(f"{icon} –î–µ–¥–ª–∞–π–Ω ¬´{title}¬ª –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ —Å—É—Ç–∫–∏ (‚àí1 –∫–∞—Ä–º–∞)")
            elif kind == "rank_up":
                out.append(f"{icon} –ê–ø —Ä–∞–Ω–≥–∞")
            else:
                out.append(f"{icon} {kind} ‚Ä¢ ¬´{title}¬ª")
        return "\n".join(out)
    finally:
        await db.close()
