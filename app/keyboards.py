from __future__ import annotations
from typing import List, Dict, Optional

from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def main_menu(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """
    –ù–∏–∂–Ω—è—è reply-–∫–ª–∞–≤–∞: –≤—Å–µ –±–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö.
    """
    kb = ReplyKeyboardBuilder()
    kb.button(text="‚ûï –î–∞—Ç—å –º–∏—Å—Å–∏—é")
    kb.button(text="üéØ –ú–æ–∏ –º–∏—Å—Å–∏–∏")
    kb.button(text="üóÇ –í—Å–µ –º–∏—Å—Å–∏–∏")
    kb.button(text="üèÅ –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ä–º—ã")
    if is_admin:
        kb.button(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    # 2 —Ä—è–¥–∞ –ø–æ 2, –∑–∞—Ç–µ–º –ø–æ—Å–ª–µ–¥–Ω—è—è –æ–¥–∏–Ω–æ—á–Ω–∞—è
    kb.adjust(2, 2, 1)
    return kb.as_markup(resize_keyboard=True, one_time_keyboard=False)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def build_user_picker_kb(
    users: List[Dict],
    page: int,
    total: int,
    page_size: int,
    with_cancel: bool = True,
) -> InlineKeyboardMarkup:
    """
    users: [{tg_id, username, full_name, karma?, active_count?, active?}, ...]
    –ö–æ–ª–ª–±–µ–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å —Ç–µ–∫—É—â–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏:
      - pick:set:<tg_id>
      - pick:page:<num>
      - add:cancel (–Ω–æ–≤–∞—è, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è ‚Äî –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ç—å –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ)
    """
    kb = InlineKeyboardBuilder()

    # –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ = [–∏–º—è ‚Ä¢ –∫–∞—Ä–º–∞ ‚Ä¢ –∞–∫—Ç–∏–≤]  (—Ç–∞—á –ø–æ —Å—Ç—Ä–æ–∫–µ –≤—ã–±–∏—Ä–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)
    for u in users:
        name = u.get("full_name") or (f"@{u['username']}" if u.get("username") else f"id{u['tg_id']}")
        karma = int(u.get("karma") or 0)
        active = int(u.get("active_count") or 0)
        label = f"{name} ‚Ä¢ ‚öñÔ∏è{karma} ‚Ä¢ üî•{active}"
        kb.button(text=label, callback_data=f"pick:set:{int(u['tg_id'])}")

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    has_prev = page > 0
    has_next = (page + 1) * page_size < total
    if has_prev:
        kb.button(text="‚¨ÖÔ∏è", callback_data=f"pick:page:{page-1}")
    if has_next:
        kb.button(text="‚û°Ô∏è", callback_data=f"pick:page:{page+1}")

    # –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–µ –ª–æ–º–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É)
    if with_cancel:
        kb.button(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="add:cancel")

    # –ª—é–¥–∏ –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥, –∑–∞—Ç–µ–º —Å—Ç—Ä–µ–ª–∫–∏/–æ—Ç–º–µ–Ω–∞ –≤ –æ–¥–∏–Ω —Ä—è–¥
    if has_prev or has_next or with_cancel:
        kb.adjust(1, 3)
    else:
        kb.adjust(1)

    return kb.as_markup()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–æ–∏ –º–∏—Å—Å–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def my_mission_kb(mid: int) -> InlineKeyboardMarkup:
    """
    –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–∏—Å—Å–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"assign:accept:{mid}")
    kb.button(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"assign:decline:{mid}")
    kb.button(text="‚è≥ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"m:{mid}:postmenu")
    kb.adjust(2, 1)
    return kb.as_markup()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–µ–π—Å—Ç–≤–∏—è –ø–æ –º–∏—Å—Å–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def mission_actions(mid: int) -> InlineKeyboardMarkup:
    """
    –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –º–∏—Å—Å–∏–∏. –£–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –ø—Ä–∞–≤–∞ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ.
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="‚è≥ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"m:{mid}:postmenu")
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å –±–µ–∑ —à—Ç—Ä–∞—Ñ–∞ (–∞–¥–º–∏–Ω)", callback_data=f"m:{mid}:delete_nopenalty")
    kb.adjust(1, 1)
    return kb.as_markup()


def postpone_menu_kb(mid: int) -> InlineKeyboardMarkup:
    """
    –ü–æ–¥–º–µ–Ω—é –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–µ–¥–ª–∞–π–Ω–∞ (—à—Ç—Ä–∞—Ñ—ã/–±–µ–∑ —à—Ç—Ä–∞—Ñ–∞).
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï 1 –¥–µ–Ω—å (–±–µ–∑ —à—Ç—Ä–∞—Ñ–∞)", callback_data=f"m:{mid}:post:1")
    kb.button(text="‚ûï 2 –¥–Ω—è (‚àí1 –∫–∞—Ä–º–∞)", callback_data=f"m:{mid}:post:2")
    kb.button(text="‚ûï 3 –¥–Ω—è (‚àí1 –∫–∞—Ä–º–∞)", callback_data=f"m:{mid}:post:3")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"m:{mid}:post:cancel")
    kb.adjust(1, 1, 1, 1)
    return kb.as_markup()


def review_kb(mid: int) -> InlineKeyboardMarkup:
    """
    –†–µ–≤—å—é –æ—Ç—á—ë—Ç–∞: –ø—Ä–∏–Ω—è—Ç—å / –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –æ—Ç—á—ë—Ç", callback_data=f"m:{mid}:review:ok")
    kb.button(text="üõ† –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f"m:{mid}:review:rework")
    kb.adjust(2)
    return kb.as_markup()


def add_menu_kb() -> InlineKeyboardMarkup:
    """
    –ü–µ—Ä–≤–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏—Å—Å–∏–∏ (–±–µ–∑ AI-—Ñ–ª–æ—É).
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="üë§ –í—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data="add:pick")
    kb.adjust(1)
    return kb.as_markup()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞–≥–∏–Ω–∞—Ü–∏—è ¬´–í—Å–µ –º–∏—Å—Å–∏–∏¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def pagination(prefix: str, page: int, has_prev: bool, has_next: bool) -> InlineKeyboardMarkup:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –º–∏—Å—Å–∏–π.
    prefix: –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–ª–ª–±—ç–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'all' –∏–ª–∏ 'mine')
    """
    kb = InlineKeyboardBuilder()
    if has_prev:
        kb.button(text="‚¨ÖÔ∏è", callback_data=f"{prefix}:page:{page-1}")
    if has_next:
        kb.button(text="‚û°Ô∏è", callback_data=f"{prefix}:page:{page+1}")
    if has_prev or has_next:
        kb.adjust(2)
    return kb.as_markup()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def confirm_assign_kb(mid: int) -> InlineKeyboardMarkup:
    """
    –î—É–±–ª–∏—Ä—É—é—â–∞—è –ø–∞—Ä–∞ ¬´–ü—Ä–∏–Ω—è—Ç—å / –û—Ç–∫–∞–∑–∞—Ç—å—Å—è¬ª ‚Äî –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π.
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"assign:accept:{mid}")
    kb.button(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"assign:decline:{mid}")
    kb.adjust(2)
    return kb.as_markup()
