# app/handlers/text_flow.py
from __future__ import annotations
from aiogram import Router, F
from aiogram.types import Message
from loguru import logger
from datetime import datetime
from zoneinfo import ZoneInfo
import os

router = Router(name="text_flow")

REPORT_CHAT_ID = int(os.getenv("REPORT_CHAT_ID", "0") or "0")
TZ = os.getenv("TZ", os.getenv("TIMEZONE", "Europe/Kyiv"))
ZONE = ZoneInfo(TZ)

@router.message(F.text & ~F.text.startswith("/"))
async def on_free_text(msg: Message):
    text = (msg.text or "").strip()
    if not text:
        return

    # 1) –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚Üí –∞–Ω–∞–ª–∏–∑
    from app.services.ai_assistant import assistant_summarize_quick, render_street_mission
    analysis = await assistant_summarize_quick(text)

    # 2) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–µ–¥–ª–∞–π–Ω
    due_at = None
    if analysis.get("deadline_ts"):
        due_at = datetime.fromtimestamp(int(analysis["deadline_ts"]), tz=ZONE)

    # 3) –°–æ–∑–¥–∞—ë–º –º–∏—Å—Å–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π —Å–µ—Ä–≤–∏—Å; –µ—Å–ª–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –¥—Ä—É–≥–∞—è ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –∞—Ä–≥—É–º–µ–Ω—Ç—ã)
    created = None
    try:
        from app.services import missions_service
        created = await missions_service.create_mission(
            title=analysis["title"],
            description=analysis["description_og"],    # –≤–∞–∂–Ωo: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —é–∑–µ—Ä–∞
            due_at=due_at,
            priority=analysis.get("priority", "normal"),
            created_by=msg.from_user.id,
            assignee_username=analysis.get("assignee_username"),
            difficulty=analysis.get("difficulty_points"),
            karma=analysis.get("karma_points"),
        )
    except Exception as e:
        logger.warning(f"[text_flow] create_mission failed: {e}")

    # 4) –£–ª–∏—á–Ω—ã–π —à–∞–±–ª–æ–Ω (–ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    street = render_street_mission(
        analysis,
        requester_name=msg.from_user.full_name,
        assignee_name=analysis.get("assignee_username"),
    )
    await msg.answer(street)

    # 5) –†–∞—Å—Å—ã–ª–∫–∞: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω) + –≤ –æ–±—â–∏–π —á–∞—Ç (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω REPORT_CHAT_ID)
    try:
        from aiogram import Bot
        bot: Bot = msg.bot

        # –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        if analysis.get("assignee_username"):
            # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å map username->tg_id ‚Äî –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ id;
            # –∏–Ω–∞—á–µ —à–ª—ë–º –≤ –æ–±—â–∏–π —á–∞—Ç —Å—Ä–∞–∑—É
            pass

        # –æ–±—â–∏–π —á–∞—Ç (—Ä–µ–ø–æ—Ä—Ç)
        if REPORT_CHAT_ID:
            await bot.send_message(REPORT_CHAT_ID, f"üÜï –ù–æ–≤–∞—è –º–∏—Å—Å–∏—è:\n{street}")

    except Exception as e:
        logger.warning(f"[text_flow] broadcast failed: {e}")
